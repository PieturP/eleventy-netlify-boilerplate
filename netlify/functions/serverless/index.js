const { EleventyServerless } = require("@11ty/eleventy");
const dotenv = require('dotenv');
const booksService = require('./books-service.js');
const PAGE_SIZE = 10;


// Explicit dependencies for the bundler from config file and global data.
// The file is generated by the Eleventy Serverless Bundler Plugin.
require("./eleventy-bundler-modules.js");

async function handler(event) {
  dotenv.config();

  const path = event.path.split('/');
  const route = path[path.length - 2];

  console.log({
    query: event.queryStringParameters,
    path: event.path,
    route: route
  })

  let elev = new EleventyServerless("serverless", {
    path: event.path,
    query: event.queryStringParameters,
    functionsDir: "./netlify/functions/",
    config: (eleventyConfig) => {

      eleventyConfig.dataFilterSelectors.add("authors"); // ? @FIXME! //@TODO: read docs

      if (route === "search") {
        // eleventyConfig.addGlobalData("fetchedBooks", async () => await booksService.searchBooks(event.queryStringParameters) );

        let query = event.queryStringParameters;
        let nav = {};
        const page = parseInt(query.page, 10) || 1;
        delete query.page

        eleventyConfig.addGlobalData("fetchedBooks", async() => {
          const resp = await booksService.searchBooks(query, (page-1), PAGE_SIZE);
          const q = new URLSearchParams(query);
          if (!resp) {
            return
          }
          if (resp.meta.filter_count > PAGE_SIZE) {
            console.log('OPTION FOR NEXT PAGE ADDED')
            nav.next = `/search/?${q}&page=${page + 1}`;
          }
          if (page > 1) {
            console.log('OPTION FOR PREVIOUS PAGE ADDED')
            nav.previous = `/search/?${q}&page=${page - 1}`;
          }
          if (nav.next || nav.previous) {
            resp.nav = nav;
          }

          return resp;
        });
      }
      if (route === "books") {
        const bookId = path[path.length - 1];
        eleventyConfig.addGlobalData("fetchedBook", async () => await booksService.getBook(bookId) );
      }
      if (route === 'about') {
        console.log('about!!');
      }

    }
  });

  try {
    let [page] = await elev.getOutput();

    // If you want some of the data cascade available in `page.data`, use `eleventyConfig.dataFilterSelectors`.
    // Read more: https://www.11ty.dev/docs/config/#data-filter-selectors


    return {
      statusCode: 200,
      headers: {
        "Content-Type": "text/html; charset=UTF-8",
      },
      body: page.content,
    };
  } catch (error) {
    // Only console log for matching serverless paths
    // (otherwise you’ll see a bunch of BrowserSync 404s for non-dynamic URLs during --serve)
    if (elev.isServerlessUrl(event.path)) {
      console.log("Serverless Error:", error);
    }

    return {
      statusCode: error.httpStatusCode || 500,
      body: JSON.stringify(
        {
          error: error.message,
        },
        null,
        2
      ),
    };
  }
}

// Choose one:
// * Runs on each request: AWS Lambda (or Netlify Function)
// * Runs on first request only: Netlify On-demand Builder
//   (don’t forget to `npm install @netlify/functions`)

exports.handler = handler;

//const { builder } = require("@netlify/functions");
//exports.handler = builder(handler);
