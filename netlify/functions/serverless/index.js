const { EleventyServerless } = require("@11ty/eleventy");
const dotenv = require('dotenv');
const axios = require('axios');


// Explicit dependencies for the bundler from config file and global data.
// The file is generated by the Eleventy Serverless Bundler Plugin.
require("./eleventy-bundler-modules.js");

async function handler(event) {
  dotenv.config();

  let elev = new EleventyServerless("serverless", {
    path: event.path,
    query: event.queryStringParameters,
    functionsDir: "./netlify/functions/",
    config: (eleventyConfig) => {
      eleventyConfig.addGlobalData("fetchedBook", async function() {

        const path = event.path.split('/');
        const bookId = path[path.length - 1];

        console.log(event.path, bookId)

        if (!bookId) { return { 'title': 'vla'} }

        const env = process.env;

        const data = await axios.get([
          `${env.DIRECTUS_API_HOST}/items/booksdata/${bookId}?fields=*,images.image_id.*`
        ].join(''));

        // console.log(data.data.data);

        return data.data.data
     });
    }
  });

  try {
    let [page] = await elev.getOutput();

    // If you want some of the data cascade available in `page.data`, use `eleventyConfig.dataFilterSelectors`.
    // Read more: https://www.11ty.dev/docs/config/#data-filter-selectors

    return {
      statusCode: 200,
      headers: {
        "Content-Type": "text/html; charset=UTF-8",
      },
      body: page.content,
    };
  } catch (error) {
    // Only console log for matching serverless paths
    // (otherwise you’ll see a bunch of BrowserSync 404s for non-dynamic URLs during --serve)
    if (elev.isServerlessUrl(event.path)) {
      console.log("Serverless Error:", error);
    }

    return {
      statusCode: error.httpStatusCode || 500,
      body: JSON.stringify(
        {
          error: error.message,
        },
        null,
        2
      ),
    };
  }
}

// Choose one:
// * Runs on each request: AWS Lambda (or Netlify Function)
// * Runs on first request only: Netlify On-demand Builder
//   (don’t forget to `npm install @netlify/functions`)

exports.handler = handler;

//const { builder } = require("@netlify/functions");
//exports.handler = builder(handler);
